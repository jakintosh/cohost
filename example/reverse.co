( imports )
+ co.stack
	%stash8=stash %unstash8=unstash
	%swap8=swap %unswap8=unswap
	%hold8=hold %unhold8=unhold
	%decrement8=decrement
;
( + co.loop
	%return-is-zero8=exit?
	%while %end-while
	%do-macro-while
; )

( base macros )
(
	% stash CDR8 DRD ;
	% unstash CRD8 DRR ;
	% swap CDS8 DRD ;
	% unswap CSD8 DRS ;
	% hold CDH8 DRD ;
	% unhold CHD8 ;
	% decrement LIT8 1 SUB8 ;
)

( loop macros )
% exit? LIT8 0 CRD8 EQU8 ;
% dupe-loop-counter DPR8 ;
% while [ id ] #{id} ~exit? &{id}-end JCR8 ;
% end-while [ id ] >decrement-return &{id} JPR8 #{id}-end DRR ;
% do-macro-while [ macro ]
	~dupe-loop-counter
	~while '{macro}
		~{macro}
	~end-while '{macro}
;

( routines )
: decrement-return ( n --r-- n-1 ) 
	~unstash
	~decrement
	~stash
;
: reverse ( 1b, 2b .. nb, bn --d-- nb .. 2b, 1b )
	~decrement ~stash
	~while 'reverse
		~hold
		~do-macro-while 'swap
		~unhold
		~do-macro-while 'unswap
	~end-while 'reverse
;

( example of ROM assembly )
( |0000 #program )
(	LIT8 1 LIT8 2 LIT8 3 )	( input )
(	DPD8 )					( count )
(	>reverse )				( routine )