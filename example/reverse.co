( imports )
+ .co.stack
	%stash8 %unstash8 %swap8 %unswap8 %hold8 %unhold8 %decrement8
;
+ .co.loop
	%while %end-while %do-macro-while
;

( routines )
: decrement-return ( n --r-- n-1 )
	~unstash8
	~decrement8
	~stash8
;
: reverse ( a, b, c, .., n --d-- .., c, b, a )
	~decrement8 ~stash8
	~while 'reverse
		~hold8
		~do-macro-while 'swap8
		~unhold8
		~do-macro-while 'unswap8
	~end-while 'reverse
;

( ------------------------------------------------------------------- )

( base macros )
(
	% stash8 CDR8 DRD ;
	% unstash8 CRD8 DRR ;
	% swap8 CDS8 DRD ;
	% unswap8 CSD8 DRS ;
	% hold8 CDH8 DRD ;
	% unhold8 CHD8 ;
	% decrement8 LIT8 1 SUB8 ;
)

( loop macros )
(
	% exit? LIT8 0 CRD8 EQU8 ;
	% dupe-loop-counter DPR8 ;
	% while [ id ] #{id} ~exit? &{id}-end JCR8 ;
	% end-while [ id ] >decrement-return &{id} JPR8 #{id}-end DRR ;
	% do-macro-while [ macro ]
		~dupe-loop-counter
		~while '{macro}
			~{macro}
		~end-while '{macro}
	;
)

( example of ROM assembly )
( |0000 #program )
(	LIT8 1 LIT8 2 LIT8 3 )	( input )
(	DPD8 )					( count )
(	>reverse )				( routine )